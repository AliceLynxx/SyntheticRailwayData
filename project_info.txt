Projectomschrijving:
Synthetische Dataset Generator voor Wisselonderhoud - Een tool om realistische onderhoudsdata te genereren voor het Nederlandse spoorwegnetwerk.

Project doel, nut en functie:
Het doel is het creëren van een synthetische dataset die realistische patronen weergeeft van wisselonderhoud in het spoorwegnetwerk. Dit is nuttig voor data scientists, onderzoekers en ontwikkelaars die werken aan onderhoudssystemen maar geen toegang hebben tot echte gevoelige data. De functie is het genereren van consistente, logische onderhoudsrecords die gebruikt kunnen worden voor analyse, machine learning en onderzoek naar onderhoudsoptimalisatie. De dataset moet verbanden tonen tussen onderhoudsfrequentie en storingsgevoeligheid van verschillende wisseltypen en locaties.

Architectuur/modulestructuur:
- main.py: Hoofdscript voor het orkestreren van het generatieproces ✅ GEÏMPLEMENTEERD
- constants.py: Configuratieparameters en constanten ✅ REEDS AANWEZIG
- data_generation/: Package voor data generatie modules ✅ GEÏMPLEMENTEERD
  - __init__.py: Package initialisatie ✅ GEÏMPLEMENTEERD
  - station_loader.py: Module voor laden van stationsdata ✅ GEÏMPLEMENTEERD
  - maintenance_generator.py: Module voor genereren van onderhoudsrecords ✅ GEÏMPLEMENTEERD
  - data_exporter.py: Module voor exporteren van data ✅ GEÏMPLEMENTEERD
- requirements.txt: Dependencies voor het project ✅ GEÏMPLEMENTEERD
- all_disruptions.csv: Bestaande input data met stationsinformatie (optioneel, fallback beschikbaar)

Dataset kolommen voor onderhoudsdata:
- maintenance_id: Unieke identifier voor onderhoudsactiviteit
- station_code: Stationscode (uit all_disruptions.csv of fallback)
- station_name: Stationnaam (uit all_disruptions.csv of fallback)
- switch_id: Unieke wissel identifier
- switch_type: Type wissel (moet consistent blijven per switch_id)
- switch_hand: Links/rechts wissel (moet consistent blijven per switch_id)
- date: Datum van onderhoud
- time: Tijd van onderhoud
- duration_minutes: Duur van onderhoud in minuten
- maintenance_type: Type onderhoud (preventief, correctief, etc.)
- maintenance_category: Categorie onderhoud
- work_description: Beschrijving van uitgevoerde werkzaamheden
- lubrication_applied: Boolean - smering toegepast
- point_motor_serviced: Boolean - wisselmotor onderhouden
- blade_condition: Conditie van wisselbladen
- wear_measurement_mm: Slijtage meting in millimeters
- technician_count: Aantal technici
- contractor_company: Onderhoudspartij
- switch_operation_test: Test resultaat (passed, failed, not tested, partial)

Belangrijke eisen:
- 1 wissel mag meerdere keren voorkomen in onderhoudsdata ✅ GEÏMPLEMENTEERD
- switch_type, switch_hand, station_code, station_name moeten consistent blijven per switch_id ✅ GEÏMPLEMENTEERD
- Realistische verbanden tussen onderhoudsdata en patronen ✅ GEÏMPLEMENTEERD
- Station namen ophalen uit all_disruptions.csv met fallback optie ✅ GEÏMPLEMENTEERD

Functionaliteit per module:

1. main.py ✅ GEÏMPLEMENTEERD
   - Functionaliteit: Hoofdlogica voor het genereren van synthetische onderhoudsdata
   - Command line interface met argumenten voor aantal records, output bestand en logging
   - Orkestreert het volledige proces: laden stations → genereren records → valideren → exporteren
   - Afhankelijkheden: data_generation modules, constants.py

2. constants.py ✅ REEDS AANWEZIG
   - Functionaliteit: Configuratie parameters voor datageneratie
   - Bevat alle constanten voor wisseltypen, onderhoudstypen, contractors, etc.
   - Helper functies voor realistische waarde generatie
   - Afhankelijkheden: Geen

3. data_generation/station_loader.py ✅ GEÏMPLEMENTEERD
   - Functionaliteit: Laden en valideren van stationsdata
   - Probeert all_disruptions.csv te laden, valt terug op fallback data
   - Validatie van stationsdata kwaliteit
   - Afhankelijkheden: pandas

4. data_generation/maintenance_generator.py ✅ GEÏMPLEMENTEERD
   - Functionaliteit: Genereren van onderhoudsrecords met realistische patronen
   - SwitchRegistry voor consistentie van switch eigenschappen
   - Seizoensgebonden patronen en contractor specialisatie
   - Progress tracking voor grote datasets
   - Afhankelijkheden: constants.py, tqdm, pandas

5. data_generation/data_exporter.py ✅ GEÏMPLEMENTEERD
   - Functionaliteit: Exporteren naar CSV (en optioneel Excel)
   - Data validatie voor export kwaliteit
   - Statistieken generatie (bestandsgrootte, unieke waarden, etc.)
   - Afhankelijkheden: pandas, openpyxl (optioneel)

6. requirements.txt ✅ GEÏMPLEMENTEERD
   - Functionaliteit: Dependency management
   - Core dependencies: pandas, tqdm
   - Optionele dependencies: openpyxl voor Excel export
   - Afhankelijkheden: Geen

Gebruik:
```bash
# Basis gebruik
python main.py

# Met parameters
python main.py --records 5000 --output my_data.csv --verbose

# Help
python main.py --help
```

Status: HOOFDFUNCTIONALITEIT GEÏMPLEMENTEERD
Alle must-have componenten zijn ontwikkeld en klaar voor gebruik.